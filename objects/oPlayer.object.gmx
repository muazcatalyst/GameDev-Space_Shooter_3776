<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sPlayer</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ResetShunts()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/* Movement */

  
if mouse_check_button(mb_right) {
   MyVerticalSpeed = 0
   MyHorizontalSpeed = 0
}
else {
  MyVerticalSpeed = 150 / room_speed
  MyHorizontalSpeed = 150 / room_speed
}

if keyboard_check_direct(ord('W')) {
    vspeed = - MyVerticalSpeed
}
else {
    vspeed = - 0
}

if keyboard_check_direct(ord('S')) {
    vspeed = + MyVerticalSpeed
}


if keyboard_check_direct(ord('A')) {
    hspeed = - MyHorizontalSpeed
}
else {
  hspeed = - 0
}

if keyboard_check_direct(ord('D')) {
    hspeed = + MyHorizontalSpeed
}

hspeed = hspeed + xShunt
vspeed = vspeed + yShunt
ResetShunts()

//If we're about to hit a block
if place_meeting(x + hspeed, y + vspeed, oSolid) {

    //Keep as much of our horizontal speed as possible
    OldHSpeed = hspeed
    hspeed = 0
    while
        place_meeting(x + hspeed + sign(OldHSpeed), y, oSolid) = false &amp;&amp; //Check there's still room if we crept a bit closer to our old hspeed
        abs(hspeed) &lt; abs(OldHSpeed) //Check we haven't restored all of our old hspeed, and only pay attention to the 'absolute' values, the magnitudes
    {
        //Creep towards old hspeed
        hspeed = hspeed + sign(OldHSpeed)
    }   
    
    //We have now figured out how much of our hspeed we can keep without hitting anything, so we're keeping that.

    //Keep as much of our horizontal speed as possible
    OldVSpeed = vspeed
    vspeed = 0
    while
        place_meeting(x + hspeed, y + vspeed + sign(OldVSpeed), oSolid) = false &amp;&amp; //Check there's still room if we crept a bit closer to our old vspeed
        abs(vspeed) &lt; abs(OldVSpeed) //Check we haven't restored all of our old vspeed, and only pay attention to the 'absolute' values, the magnitudes
    {
        //Creep towards old hspeed
        vspeed = vspeed + sign(OldVSpeed)
    }     

}

/* Boosting */

if mouse_check_button(mb_right) {
  Boost = instance_create (x,y,oBoost)
  Boost.direction = Facing + 180
  Boost.speed = 360 / room_speed
  Boost.image_angle = Facing + 180 

  Kick = 360 / room_speed
  KickDirection = Facing
  xShunt = lengthdir_x(Kick,KickDirection)
  yShunt = lengthdir_y(Kick,KickDirection)
}

if mouse_check_button(mb_right) &amp;&amp; place_meeting(x + hspeed,y + vspeed,oSolid) = false {
  sprite_index = sPlayerBoosting
}
  else {
    sprite_index = sPlayer
  }

/* Camera Facing */

  Facing = point_direction(x,y,mouse_x,mouse_y)


/* Shooting */

if mouse_check_button_pressed(mb_left) {
  audio_play_sound(sndLaserShoot,0,false)
  Bullet = instance_create (x,y,oBullet)
  Bullet.direction = Facing
  Bullet.speed = 420 / room_speed
  Bullet.image_angle = Facing
}


/* Staying On-screen */

if x &lt; 0 { x = 0 }
if y &lt; 0 { y = 0 }
if x &gt; room_width { x = room_width }
if y &gt; room_height { y = room_height }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="oEnemyBullet">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/* Damage */

TotalChunksToCreate = 10
TotalChunksSoFar = 0
ChunkSpeed = 360 / room_speed

while TotalChunksSoFar &lt; TotalChunksToCreate {
  NewChunk = instance_create(x,y,oPlayerChunk)
  NewChunk.direction = random(360)
  NewChunk.speed = ChunkSpeed
  TotalChunksSoFar = TotalChunksSoFar + 1
}

instance_destroy()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="oEnemy">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>TotalChunksToCreate = 10
TotalChunksSoFar = 0
ChunkSpeed = 360 / room_speed

while TotalChunksSoFar &lt; TotalChunksToCreate {
  NewChunk = instance_create(x,y,oPlayerChunk)
  NewChunk.direction = random(360)
  NewChunk.speed = ChunkSpeed
  TotalChunksSoFar = TotalChunksSoFar + 1
}

instance_destroy()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/* Draw our sprite normally, but facing our 'facing' direction without changing image angle*/

draw_sprite_ext(sprite_index,image_index,x,y,image_xscale,image_yscale,Facing,image_blend,image_alpha)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
